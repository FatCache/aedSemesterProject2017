/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Market;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.MarketEnterprise;
import Business.Network.MarketNews;
import Business.Network.Network;
import Business.Network.Product;
import Business.Organization.MarketOrganization;
import Business.Organization.Organization;
import Business.UserAccount.FarmerUserAccount;
import Business.UserAccount.UserAccount;
import Business.Utility;
import Business.WorkQueue.ProducePickUpRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author abdusamed
 */
public class MarketManagerWorkAreaJPanel extends javax.swing.JPanel {
    JPanel userProcessContainer;
    UserAccount account;
    MarketOrganization organization;
    Enterprise enterprise;
    Network network;

    /**
     * Creates new form MarketManagerWorkAreaJPanel
     */
    
    public MarketManagerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, MarketOrganization organization, Enterprise enterprise, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.network = network;
        
        populateTables();
        
//        populateProduceDefault();
//        populateProduceCurrent();
//        populateProduceEnd();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProduceDefault = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblProduceEnd = new javax.swing.JTable();
        btnEndBid = new javax.swing.JButton();
        btnSendFarmDetail = new javax.swing.JButton();
        btnPutOnBid = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblProduceCurrent = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();

        jLabel2.setText("Items To Be Put On Bid");

        jLabel3.setText("Items Currently in Bid");

        tblProduceDefault.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Farmer Name", "Produce", "Status"
            }
        ));
        jScrollPane2.setViewportView(tblProduceDefault);

        tblProduceEnd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Produce", "Current Bid", "Last Bid By", "Status", "Owner", "Final Bid"
            }
        ));
        jScrollPane3.setViewportView(tblProduceEnd);

        btnEndBid.setText("End Bid");
        btnEndBid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEndBidActionPerformed(evt);
            }
        });

        btnSendFarmDetail.setText("Report to Farmer");
        btnSendFarmDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendFarmDetailActionPerformed(evt);
            }
        });

        btnPutOnBid.setText("Put Produce On Bid");
        btnPutOnBid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPutOnBidActionPerformed(evt);
            }
        });

        jLabel4.setText("Items Bid Completed");

        tblProduceCurrent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Produce", "Current Bid", "Last Bid By", "Status", "Owner", "Final Bid"
            }
        ));
        jScrollPane4.setViewportView(tblProduceCurrent);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Market Manager Work View");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnEndBid, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPutOnBid, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                    .addComponent(btnSendFarmDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)))
                .addGap(0, 61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(38, 38, 38)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPutOnBid)
                .addGap(33, 33, 33)
                .addComponent(jLabel3)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEndBid)
                .addGap(34, 34, 34)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSendFarmDetail)
                .addContainerGap(60, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPutOnBidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPutOnBidActionPerformed
        // TODO add your handling code here:
	int seletectedRow = tblProduceDefault.getSelectedRow();
        
        if(seletectedRow < 0  ){
            JOptionPane.showMessageDialog(null, "Please select Items to Place On Bid", "Warning", JOptionPane.WARNING_MESSAGE);
        }else{
            ProducePickUpRequest request = (ProducePickUpRequest) tblProduceDefault.getValueAt(seletectedRow, 1);
            //if(request.getFinalBid() == 0){
                request.setStatus("Available For Bid"); // Check for CURRENT BID TABLE
                request.setBidStatus(true); // Default Table Check - no longer can be displayed on top
                System.out.println("Item successfully placed to bid on!");
                JOptionPane.showMessageDialog(null, "Item placed on Bid successfully", "Success", JOptionPane.OK_OPTION);
            //}
        //else{
          //      JOptionPane.showMessageDialog(null, "Item is Already on Bid", "Warning", JOptionPane.WARNING_MESSAGE);
         //   }
            
        }
        
         populateTables();
    }//GEN-LAST:event_btnPutOnBidActionPerformed

    private void btnEndBidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEndBidActionPerformed
        // TODO add your handling code here:
        int seletectedRow = tblProduceCurrent.getSelectedRow();
        
        if(seletectedRow < 0  ){
            JOptionPane.showMessageDialog(null, "Please select row from Bid Current Table", "Warning", JOptionPane.WARNING_MESSAGE);
        }else{
            ProducePickUpRequest request = (ProducePickUpRequest) tblProduceCurrent.getValueAt(seletectedRow, 0);
            if(request.getCurrentBid() > 0){
                request.setStatus("Bid Finished - From Market"); // No longer displayed at Mid Table
                int finalPrice = request.getCurrentBid();
                request.setFinalBid(finalPrice);
                //request.setBidStatus(true);
                request.getProduct().setRate(finalPrice); // For Assistant View
                System.out.println("Request updated");
                
                
                
                // For Assistant Panel Display
                Product product = new Product(request.getProduct().getProductType());
                product.setRate(finalPrice);
                
                int monthInt = request.getResolveDate().getMonth(); // 0 - 11
                switch(monthInt){
                    case(0):{product.setProductMonth(Product.ProductMonth.JAN);break;}
                    case(1):{product.setProductMonth(Product.ProductMonth.FEB);break;}
                    case(2):{product.setProductMonth(Product.ProductMonth.MAR);break;}
                    case(3):{product.setProductMonth(Product.ProductMonth.APR);break;}
                    case(4):{product.setProductMonth(Product.ProductMonth.MAY);break;}
                    case(5):{product.setProductMonth(Product.ProductMonth.JUN);break;}
                    case(6):{product.setProductMonth(Product.ProductMonth.JUL);break;}
                    case(7):{product.setProductMonth(Product.ProductMonth.AUG);break;}
                    case(8):{product.setProductMonth(Product.ProductMonth.SEP);break;}
                    case(9):{product.setProductMonth(Product.ProductMonth.OCT);break;}
                    case(10):{product.setProductMonth(Product.ProductMonth.NOV);break;}
                    case(11):{product.setProductMonth(Product.ProductMonth.DEC);break;}
                }
                
                network.getProductDirectory().getProductList().add(product);
                JOptionPane.showMessageDialog(null, "Bid Ended Successfully", "Success", JOptionPane.OK_OPTION);
//                MarketNews marketNews = new MarketNews();
//                marketNews.setDateAnnounced(Utility.getCurrentDate());
//                marketNews.setNewsDetail("Congrats. Your request for loan has been approved.");
//                marketNews.setNewsSubject("Finance Loan Status");
//                ((FarmerUserAccount)loanRequest.getSender()).getMessageList().add(marketNews);
            }
            else{
                JOptionPane.showMessageDialog(null, "Item hasn't recieved any bids!", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            
        }
        populateTables();
    }//GEN-LAST:event_btnEndBidActionPerformed

    private void btnSendFarmDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendFarmDetailActionPerformed
        // TODO add your handling code here:
         int seletectedRow = tblProduceEnd.getSelectedRow();
        
        if(seletectedRow < 0  ){
            JOptionPane.showMessageDialog(null, "Please select row from tblProduceCurrent", "Warning", JOptionPane.WARNING_MESSAGE);
        }else{
            ProducePickUpRequest request = (ProducePickUpRequest) tblProduceEnd.getValueAt(seletectedRow, 0);
            if(request.getStatus().equals("Bid Finished - From Market")){
                UserAccount farmUserAccount = request.getSender();
                if(farmUserAccount instanceof FarmerUserAccount){
                    MarketNews message = new MarketNews();
                    message.setDateAnnounced(Utility.getCurrentDate());
                    message.setNews("Congrats! Product was at the Market For $" + request.getFinalBid());
                    message.setProduct(request.getProduct());
                    ((FarmerUserAccount) farmUserAccount).getMessageList().add(message);
                    System.out.println("Message Successfully Added/Sent");
                    JOptionPane.showMessageDialog(null, "Messaged Delivered to Farmer Successfully", "Success", JOptionPane.OK_OPTION);

                }}else{
                JOptionPane.showMessageDialog(null, "Bid hasn't ended!!", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }
        
        populateTables();
        
    }//GEN-LAST:event_btnSendFarmDetailActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEndBid;
    private javax.swing.JButton btnPutOnBid;
    private javax.swing.JButton btnSendFarmDetail;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tblProduceCurrent;
    private javax.swing.JTable tblProduceDefault;
    private javax.swing.JTable tblProduceEnd;
    // End of variables declaration//GEN-END:variables

    private void populateProduceDefault() {
        DefaultTableModel dtm = (DefaultTableModel) tblProduceDefault.getModel();
        dtm.setRowCount(0);

        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            if(request instanceof ProducePickUpRequest){
                if(((ProducePickUpRequest) request).getDropOffLocation().equals("Market")){
                    if(!((ProducePickUpRequest) request).isBidStatus()){    // !false => hence true - availiable for bidding. Bid happens current price changes, but can still be zero
                    Object[] row = new Object[3];
                    row[0] = request.getSender();
                    row[1] = ((ProducePickUpRequest) request);
                    row[2] = request.getStatus() == null? "In Market - No Bid Currently":request.getStatus();
                    
                    dtm.addRow(row);
                }
            }
        }
        
    }
    }

    private void populateProduceCurrent() {
        
        DefaultTableModel dtm = (DefaultTableModel) tblProduceCurrent.getModel();
        dtm.setRowCount(0);

        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            if(request instanceof ProducePickUpRequest){
                if(request.getStatus().equals("Available For Bid")){
                
                Object[] row = new Object[6];
                row[0] = ((ProducePickUpRequest) request);
                row[1] = ((ProducePickUpRequest) request).getCurrentBid();
                row[2] = ((ProducePickUpRequest) request).getLastBidBy();
                row[3] = request.getStatus();
                row[4] = request.getSender();
                row[5] = ((ProducePickUpRequest) request).getFinalBid();
                dtm.addRow(row);
                }
            }
        }
    }
    
    
    public static MarketOrganization getMarketOrganization(){
        EcoSystem business = EcoSystem.getInstance();
        for(Network network:business.getNetworkList()){
            for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList()){
                if(enterprise instanceof MarketEnterprise){
                    for(Organization organization:enterprise.getOrganizationDirectory().getOrganizationList()){
                        if(organization instanceof MarketOrganization){
                            return (MarketOrganization) organization;
                    }

                    }
                }
            }
        }
        return null;
    }
    
    public void populateTables(){
        populateProduceDefault();
        populateProduceCurrent();
        populateProduceEnd();
    }

    private void populateProduceEnd() {
        DefaultTableModel dtm = (DefaultTableModel) tblProduceEnd.getModel();
        dtm.setRowCount(0);

        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            if(request instanceof ProducePickUpRequest){
                if(request.getStatus().equals("Bid Finished - From Market")){
                
                Object[] row = new Object[6];
                row[0] = ((ProducePickUpRequest) request);
                row[1] = ((ProducePickUpRequest) request).getCurrentBid();
                row[2] = ((ProducePickUpRequest) request).getLastBidBy();
                row[3] = request.getStatus();
                row[4] = request.getSender();
                row[5] = ((ProducePickUpRequest) request).getFinalBid();
                dtm.addRow(row);
                }
            }
        }
    }
}


