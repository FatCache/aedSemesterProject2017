/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Transport;

import Business.Enterprise.Enterprise;
import Business.Enterprise.FarmerEnterprise;
import Business.Enterprise.MarketEnterprise;
import Business.Enterprise.TransportEnterprise;
import Business.Network.MarketNews;
import Business.Network.Network;
import Business.Organization.FarmerOrganization;
import Business.Organization.MarketOrganization;
import Business.Organization.Organization;
import Business.Organization.TransportOrganization;
import Business.UserAccount.DriverUserAccount;
import Business.UserAccount.FarmerUserAccount;
import Business.UserAccount.UserAccount;
import Business.Utility;
import Business.WorkQueue.MachineryRequest;
import Business.WorkQueue.ProducePickUpRequest;
import Business.WorkQueue.WorkRequest;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author abdusamed
 */
public class TransportManagerWorkAreaJPanel extends javax.swing.JPanel {
    JPanel userProcessContainer;
    UserAccount account;
    TransportOrganization organization;
    Enterprise enterprise;
    Network network;
    
    FarmerOrganization inFarmerOrganization;
    TransportOrganization inTransportOrganization;
    MarketOrganization inMarketOrganization;

    /**
     * Creates new form TransportManagerWorkAreaJPanel
     */
    public TransportManagerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account,  TransportOrganization organization, Enterprise enterprise, Network network) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.network = network;
        inMarketOrganization = Utility.getMarketOrganization();
        
        populateDriverTable();
        populateJobsAvailiable();
        populateJobAssignedTable();
        populateMachineryTable();
        
        populateDriverCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnMachineryApprove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblShareMachinery = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbDriverSelection = new javax.swing.JComboBox();
        cmbdropoffLocation = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDriverList = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblJobAssigned = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        btnAssignJob = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblJobsAvailiable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jxDatePickerDropOff = new org.jdesktop.swingx.JXDatePicker();
        jLabel10 = new javax.swing.JLabel();
        jxDatePickerMachinery = new org.jdesktop.swingx.JXDatePicker();
        jLabel11 = new javax.swing.JLabel();

        btnMachineryApprove.setText("Approve Machinery Request");
        btnMachineryApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMachineryApproveActionPerformed(evt);
            }
        });

        tblShareMachinery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Farmer Name", "Machinery Requested", "Status", "Date Requested", "Date Resolve On", "Resolved By", "Avaliable Date"
            }
        ));
        jScrollPane2.setViewportView(tblShareMachinery);

        jLabel4.setText("Pick Up Job Requested from FARMER");

        jLabel5.setText("Select Drop Off Location for MARKET");

        jLabel6.setText("Select Driver");

        cmbDriverSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Driver" }));
        cmbDriverSelection.setToolTipText("Select Location");

        cmbdropoffLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Market", "Cold Storage" }));
        cmbdropoffLocation.setToolTipText("Select Location");

        tblDriverList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Driver Name", "Truck Type", "Product Type", "Status"
            }
        ));
        jScrollPane3.setViewportView(tblDriverList);

        tblJobAssigned.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Farmer Name", "Driver Assigned", "Drop-off Location", "Date Assigned", "PickUp Date"
            }
        ));
        jScrollPane4.setViewportView(tblJobAssigned);

        jLabel7.setText("Driver List");

        btnAssignJob.setText("Assign Job");
        btnAssignJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignJobActionPerformed(evt);
            }
        });

        jLabel8.setText("Uber Machinery");

        tblJobsAvailiable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Farmer Name", "Address", "Date Requested", "Status", "Product Type", "Truck Type"
            }
        ));
        jScrollPane5.setViewportView(tblJobsAvailiable);

        jLabel9.setText("Jobs Assigned");

        jLabel10.setText("PickUp Date");

        jxDatePickerMachinery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jxDatePickerMachineryActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Transport Manager Work View");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel10))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(cmbDriverSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(cmbdropoffLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnAssignJob, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jxDatePickerDropOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(jLabel9)))))
                        .addGap(0, 122, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jxDatePickerMachinery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnMachineryApprove)
                                .addGap(90, 90, 90))
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addGap(11, 11, 11)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cmbDriverSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbdropoffLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAssignJob))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jxDatePickerDropOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(29, 29, 29)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jxDatePickerMachinery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMachineryApprove))
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignJobActionPerformed
        // TODO add your handling code here:
        
        int seletectedRow = tblJobsAvailiable.getSelectedRow();
        UserAccount driverAccount = (UserAccount) cmbDriverSelection.getSelectedItem();
        
        if(seletectedRow < 0 || driverAccount == null || jxDatePickerDropOff.getDate() == null  ){
            JOptionPane.showMessageDialog(null, "Please SELECT a JOB & a DRIVER", "Warning", JOptionPane.WARNING_MESSAGE);
        }else{
            String dropOffLocation = cmbdropoffLocation.getSelectedItem().toString();
            if(dropOffLocation.equals("Cold Storage")){
                ProducePickUpRequest pickUpRequest = (ProducePickUpRequest) tblJobsAvailiable.getValueAt(seletectedRow, 4);
                
                pickUpRequest.setDropOffLocation(dropOffLocation);
                pickUpRequest.setReceiver(driverAccount);
                pickUpRequest.setResolveDate(Utility.getCurrentDate());
                pickUpRequest.setStatus("Cold Storage Assigned");
                pickUpRequest.setPickupDate(jxDatePickerDropOff.getDate());
                
                driverAccount.getWorkQueue().getWorkRequestList().add(pickUpRequest);
                organization.getWorkQueue().getWorkRequestList().add(pickUpRequest);
            } else if( dropOffLocation == "Market"){
                //ProducePickUpRequest pickUpRequest = (ProducePickUpRequest) tblJobsAvailiable.getValueAt(seletectedRow, 4);
                //ProductPickUpMarket productPickUpMarket = (ProductPickUpMarket) pickUpRequest;                                     
                ProducePickUpRequest pickUpRequest = (ProducePickUpRequest) tblJobsAvailiable.getValueAt(seletectedRow, 4);
                
                pickUpRequest.setDropOffLocation(dropOffLocation);
                pickUpRequest.setReceiver(driverAccount);
                pickUpRequest.setResolveDate(Utility.getCurrentDate());
                pickUpRequest.setStatus("Market Assigned");
                pickUpRequest.setPickupDate(jxDatePickerDropOff.getDate());
                
                driverAccount.getWorkQueue().getWorkRequestList().add(pickUpRequest);
                organization.getWorkQueue().getWorkRequestList().add(pickUpRequest);
                
                inMarketOrganization = getMarketOrganization();
                inMarketOrganization.getWorkQueue().getWorkRequestList().add(pickUpRequest);
            }
        }
        
        refreshTables();
        
    }//GEN-LAST:event_btnAssignJobActionPerformed

    private void btnMachineryApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMachineryApproveActionPerformed
        // TODO add your handling code here:
        int seletectedRow = tblShareMachinery.getSelectedRow();
        if(seletectedRow < 0 || jxDatePickerMachinery.getDate() == null){
            JOptionPane.showMessageDialog(null, "Please select a Machinery Request to Process", "Warning", JOptionPane.WARNING_MESSAGE);
            }else{
            String availibilityCheck = (String) tblShareMachinery.getValueAt(seletectedRow, 6);
            if(availibilityCheck == null){
                MachineryRequest machineryRequest = (MachineryRequest) tblShareMachinery.getValueAt(seletectedRow, 1);
                Date availabilityDate = jxDatePickerMachinery.getDate();
                machineryRequest.setAvailabilityDate(availabilityDate);
                machineryRequest.setResolveDate(Utility.getCurrentDate());
                machineryRequest.setStatus("Request Approved - TransManager");
                machineryRequest.setReceiver(account);
                
                MarketNews marketNews = new MarketNews();
                marketNews.setDateAnnounced(Utility.getCurrentDate());
                marketNews.setNewsDetail("Machinery Request Approved. Will be availiable on -> " + availibilityCheck);
                marketNews.setNewsSubject("Machinery Request");
                ((FarmerUserAccount)machineryRequest.getSender()).getMessageList().add(marketNews);

                
                
                JOptionPane.showMessageDialog(null, "Machinery Request Approved", "Success", JOptionPane.OK_OPTION);
            }
        }
        
        populateMachineryTable();
        
        
        
    }//GEN-LAST:event_btnMachineryApproveActionPerformed

    private void jxDatePickerMachineryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jxDatePickerMachineryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jxDatePickerMachineryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignJob;
    private javax.swing.JButton btnMachineryApprove;
    private javax.swing.JComboBox cmbDriverSelection;
    private javax.swing.JComboBox<String> cmbdropoffLocation;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private org.jdesktop.swingx.JXDatePicker jxDatePickerDropOff;
    private org.jdesktop.swingx.JXDatePicker jxDatePickerMachinery;
    private javax.swing.JTable tblDriverList;
    private javax.swing.JTable tblJobAssigned;
    private javax.swing.JTable tblJobsAvailiable;
    private javax.swing.JTable tblShareMachinery;
    // End of variables declaration//GEN-END:variables

    private void populateDriverTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblDriverList.getModel();
        dtm.setRowCount(0);
        for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList()){
            if(enterprise instanceof TransportEnterprise){
                for(Organization organization:enterprise.getOrganizationDirectory().getOrganizationList()){
                    if(organization instanceof TransportOrganization){
                        inTransportOrganization = (TransportOrganization) organization;
                            for(UserAccount driverUserAccount : organization.getUserAccountDirectory().getUserAccountList()){
                                if(driverUserAccount instanceof DriverUserAccount){{
                                    Object[] row = new Object[4];
                                    row[0] = driverUserAccount;
                                    for(WorkRequest workRequest : driverUserAccount.getWorkQueue().getWorkRequestList()){
                                        if(workRequest instanceof ProducePickUpRequest){
                                            row[0] = driverUserAccount;
                                            row[1] = ((ProducePickUpRequest) workRequest).getTruckSize();
                                            row[2] = ((ProducePickUpRequest) workRequest).getProduct().getProductType();
                                            row[3] = workRequest.getStatus();                                            
                                        }else{
                                            row[3] = "No Job Assigned";
                                        }                                        
                                    }
                                    dtm.addRow(row);
                                }
                            }
                        }
                    }
                }
            }
    
        }
    }

    private void populateJobsAvailiable() {
        DefaultTableModel dtm = (DefaultTableModel) tblJobsAvailiable.getModel();
        dtm.setRowCount(0);
        for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList()){
            if(enterprise instanceof FarmerEnterprise){
                for(Organization organization:enterprise.getOrganizationDirectory().getOrganizationList()){
                    if(organization instanceof FarmerOrganization){
                        inFarmerOrganization = (FarmerOrganization) organization;
                            for(UserAccount farmerUserAccount : organization.getUserAccountDirectory().getUserAccountList()){
                                if(farmerUserAccount instanceof FarmerUserAccount){
                                    for(ProducePickUpRequest producePickUpRequest : ((FarmerUserAccount) farmerUserAccount).getProducePickUpRequest()){
                                        Object[] row = new Object[6];
                                        row[0] = farmerUserAccount.getEmployee().getName();
                                        row[1] = ((FarmerUserAccount) farmerUserAccount).getAddress();
                                        row[2] = producePickUpRequest.getRequestDate();
                                        row[3] = producePickUpRequest.getStatus();
                                        row[4] = producePickUpRequest;
                                        row[5] = producePickUpRequest.getTruckSize();
                                        dtm.addRow(row);
                                    }
                                }
                            }
                    }
                }
            }
        }
    }

    private void populateMachineryTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblShareMachinery.getModel();
        dtm.setRowCount(0);
        
        for(UserAccount account: inFarmerOrganization.getUserAccountDirectory().getUserAccountList()){
            if(account instanceof FarmerUserAccount){
                for(MachineryRequest request : ((FarmerUserAccount) account).getTransportMachineWorkQueue()){
                    Object[] row = new Object[7];
                    row[0] = account.getEmployee().getName();
                    row[1] = request;
                    row[2] = request.getStatus();
                    row[3] = request.getRequestDate();
                    row[4] = request.getResolveDate() == null? null : request.getResolveDate();
                    row[5] = request.getReceiver() == null? null:request.getResolveDate();  
                    row[6] = request.getAvailabilityDate() == null? null:request.getAvailabilityDate();
                    dtm.addRow(row);
                }

            }
        }
    }

    private void populateJobAssignedTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblJobAssigned.getModel();
        dtm.setRowCount(0);
        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            ProducePickUpRequest pickupRequest = (ProducePickUpRequest) request;
            Object[] row = new Object[5];
            row[0] = pickupRequest.getSender();
            row[1] = pickupRequest.getReceiver();
            row[2] = pickupRequest.getDropOffLocation();
            row[3] = pickupRequest.getResolveDate();
            row[4] = pickupRequest.getPickupDate();
            dtm.addRow(row);
        }
    }

    private void populateDriverCombo() {
        cmbDriverSelection.removeAllItems();
        for(UserAccount driverUserAccount :inTransportOrganization.getUserAccountDirectory().getUserAccountList()){
            if(driverUserAccount instanceof DriverUserAccount){
                cmbDriverSelection.addItem(driverUserAccount);
            }
        }
    }
    
    private void refreshTables(){
        populateDriverTable();
        populateJobsAvailiable();
        populateJobAssignedTable();
        populateMachineryTable();
    }
    
    
    public MarketOrganization getMarketOrganization(){
        
        for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList()){
                if(enterprise instanceof MarketEnterprise){
                    for(Organization organization:enterprise.getOrganizationDirectory().getOrganizationList()){
                        if(organization instanceof MarketOrganization){
                            return (MarketOrganization) organization;
                        }
                    }
                }
        }
            
        return null;
    }
}

